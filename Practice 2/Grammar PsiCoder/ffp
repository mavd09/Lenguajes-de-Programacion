void ADT( ) {
	if( token == "estructura" ) {
		match( "estructura" );
		match( "id" );
		VARIABLE_DECLARATION( );
		ADT_( );
		match( "fin_estructura" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void ADT_( ) {
	if( token == "cadena" || token == "caracter" || token == "entero" || token == "id" || token == "real" ) {
		VARIABLE_DECLARATION( );
		ADT_( );
		return ;
	}
	if( token == "fin_estructura" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void ASSIGN_VALUE( ) {
	if( token == "tk_coma" || token == "tk_pyc" ) {
		return ;
	}
	if( token == "tk_asig" ) {
		match( "tk_asig" );
		EXPRESSION1( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void BLOCK_INSTRUCTIONS( ) {
	if( token == "imprimir" ) {
		PRINT( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "leer" ) {
		READ( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "id" ) {
		VALUE_ASSIGNMENT( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "id" ) {
		CALL_FUNCTION( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "si" ) {
		IF_CONDITIONAL( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "seleccionar" ) {
		SWITCH_CASE( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "mientras" ) {
		LOOP_WHILE( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "para" ) {
		LOOP_FOR( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	if( token == "cadena" || token == "caracter" || token == "entero" || token == "id" || token == "real" ) {
		VARIABLE_DECLARATION( );
		BLOCK_INSTRUCTIONS( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void CALL_FUNCTION( ) {
	if( token == "id" ) {
		ID( );
		match( "tk_par_izq" );
		PARAMETERS( );
		match( "tk_par_der" );
		match( "tk_pyc" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void CONSTANT( ) {
	if( token == "tk_entero" ) {
		match( "tk_entero" );
		return ;
	}
	if( token == "tk_real" ) {
		match( "tk_real" );
		return ;
	}
	if( token == "tk_caracter" ) {
		match( "tk_caracter" );
		return ;
	}
	if( token == "tk_cadena" ) {
		match( "tk_cadena" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void DATATYPE( ) {
	if( token == "entero" ) {
		match( "entero" );
		return ;
	}
	if( token == "real" ) {
		match( "real" );
		return ;
	}
	if( token == "caracter" ) {
		match( "caracter" );
		return ;
	}
	if( token == "cadena" ) {
		match( "cadena" );
		return ;
	}
	if( token == "id" ) {
		match( "id" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void END_PARAMETER( ) {
	if( token == "tk_coma" ) {
		match( "tk_coma" );
		DATATYPE( );
		match( "id" );
		END_PARAMETER( );
		return ;
	}
	if( token == "tk_par_der" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void END_VAR_DECLARATION( ) {
	if( token == "tk_coma" ) {
		match( "tk_coma" );
		VAR( );
		END_VAR_DECLARATION( );
		return ;
	}
	if( token == "tk_pyc" ) {
		match( "tk_pyc" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void EXPRESSION1( ) {
	if( token == "falso" || token == "id" || token == "tk_cadena" || token == "tk_caracter" || token == "tk_entero" || token == "tk_mas" || token == "tk_menos" || token == "tk_neg" || token == "tk_par_izq" || token == "tk_real" || token == "verdadero" ) {
		TERM( );
		EXPRESSION1_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void EXPRESSION1_( ) {
	if( token == "tk_y" ) {
		match( "tk_y" );
		TERM( );
		EXPRESSION1_( );
		return ;
	}
	if( token == "tk_O" ) {
		match( "tk_O" );
		TERM( );
		EXPRESSION1_( );
		return ;
	}
	if( token == "tk_coma" || token == "tk_dif" || token == "tk_div" || token == "tk_dosp" || token == "tk_igual" || token == "tk_mas" || token == "tk_mayor" || token == "tk_mayor_igual" || token == "tk_menor" || token == "tk_menor_igual" || token == "tk_menos" || token == "tk_mod" || token == "tk_mult" || token == "tk_par_der" || token == "tk_pyc" ) {
		EXPRESSION2_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void EXPRESSION2_( ) {
	if( token == "tk_igual" ) {
		match( "tk_igual" );
		TERM( );
		EXPRESSION2_( );
		return ;
	}
	if( token == "tk_dif" ) {
		match( "tk_dif" );
		TERM( );
		EXPRESSION2_( );
		return ;
	}
	if( token == "tk_coma" || token == "tk_div" || token == "tk_dosp" || token == "tk_mas" || token == "tk_mayor" || token == "tk_mayor_igual" || token == "tk_menor" || token == "tk_menor_igual" || token == "tk_menos" || token == "tk_mod" || token == "tk_mult" || token == "tk_par_der" || token == "tk_pyc" ) {
		EXPRESSION3_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void EXPRESSION3_( ) {
	if( token == "tk_menor" ) {
		match( "tk_menor" );
		TERM( );
		EXPRESSION3_( );
		return ;
	}
	if( token == "tk_mayor" ) {
		match( "tk_mayor" );
		TERM( );
		EXPRESSION3_( );
		return ;
	}
	if( token == "tk_menor_igual" ) {
		match( "tk_menor_igual" );
		TERM( );
		EXPRESSION3_( );
		return ;
	}
	if( token == "tk_mayor_igual" ) {
		match( "tk_mayor_igual" );
		TERM( );
		EXPRESSION3_( );
		return ;
	}
	if( token == "tk_coma" || token == "tk_div" || token == "tk_dosp" || token == "tk_mas" || token == "tk_menos" || token == "tk_mod" || token == "tk_mult" || token == "tk_par_der" || token == "tk_pyc" ) {
		EXPRESSION4_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void EXPRESSION4_( ) {
	if( token == "tk_mas" ) {
		match( "tk_mas" );
		TERM( );
		EXPRESSION4_( );
		return ;
	}
	if( token == "tk_menos" ) {
		match( "tk_menos" );
		TERM( );
		EXPRESSION4_( );
		return ;
	}
	if( token == "tk_coma" || token == "tk_div" || token == "tk_dosp" || token == "tk_mod" || token == "tk_mult" || token == "tk_par_der" || token == "tk_pyc" ) {
		EXPRESSION5_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void EXPRESSION5_( ) {
	if( token == "tk_mult" ) {
		match( "tk_mult" );
		TERM( );
		EXPRESSION5_( );
		return ;
	}
	if( token == "tk_mod" ) {
		match( "tk_mod" );
		TERM( );
		EXPRESSION5_( );
		return ;
	}
	if( token == "tk_div" ) {
		match( "tk_div" );
		TERM( );
		EXPRESSION5_( );
		return ;
	}
	if( token == "tk_coma" || token == "tk_dosp" || token == "tk_par_der" || token == "tk_pyc" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void FUNCTIONS_ADT( ) {
	if( token == "funcion" ) {
		FUNCTION_DECLARATION( );
		FUNCTIONS_ADT( );
		return ;
	}
	if( token == "estructura" ) {
		ADT( );
		FUNCTIONS_ADT( );
		return ;
	}
	if( token == "$" || token == "funcion_principal" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void FUNCTION_DECLARATION( ) {
	if( token == "funcion" ) {
		match( "funcion" );
		DATATYPE( );
		match( "id" );
		match( "tk_par_izq" );
		PARAMETERS( );
		match( "tk_par_der" );
		match( "hacer" );
		BLOCK_INSTRUCTIONS( );
		match( "retornar" );
		EXPRESSION1( );
		match( "tk_pyc" );
		match( "fin_funcion" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void ID( ) {
	if( token == "id" ) {
		match( "id" );
		ID_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void ID_( ) {
	if( token == "tk_punto" ) {
		match( "tk_punto" );
		match( "id" );
		ID_( );
		return ;
	}
	if( token == "tk_O" || token == "tk_asig" || token == "tk_coma" || token == "tk_dif" || token == "tk_div" || token == "tk_dosp" || token == "tk_igual" || token == "tk_mas" || token == "tk_mayor" || token == "tk_mayor_igual" || token == "tk_menor" || token == "tk_menor_igual" || token == "tk_menos" || token == "tk_mod" || token == "tk_mult" || token == "tk_par_der" || token == "tk_par_izq" || token == "tk_pyc" || token == "tk_y" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void IF_CONDITIONAL( ) {
	if( token == "si" ) {
		match( "si" );
		match( "tk_par_izq" );
		EXPRESSION1( );
		match( "tk_par_der" );
		match( "entonces" );
		BLOCK_INSTRUCTIONS( );
		IF_CONDITIONAL_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void IF_CONDITIONAL_( ) {
	if( token == "fin_si" ) {
		match( "fin_si" );
		return ;
	}
	if( token == "si_no" ) {
		match( "si_no" );
		BLOCK_INSTRUCTIONS( );
		match( "fin_si" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void LOOP_DO_WHILE( ) {
	if( token == "hacer" ) {
		match( "hacer" );
		BLOCK_INSTRUCTIONS( );
		match( "mientras" );
		match( "tk_par_izq" );
		EXPRESSION1( );
		match( "tk_par_der" );
		match( "tk_pyc" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void LOOP_FOR( ) {
	if( token == "para" ) {
		match( "para" );
		match( "tk_par_izq" );
		LOOP_FOR1( );
		match( "tk_pyc" );
		LOOP_FOR2( );
		match( "tk_pyc" );
		LOOP_FOR3( );
		match( "tk_par_der" );
		match( "hacer" );
		BLOCK_INSTRUCTIONS( );
		match( "fin_para" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void LOOP_FOR1( ) {
	if( token == "cadena" || token == "caracter" || token == "entero" || token == "id" || token == "real" ) {
		DATATYPE( );
		match( "id" );
		match( "tk_asig" );
		EXPRESSION1( );
		return ;
	}
	if( token == "id" ) {
		match( "id" );
		match( "tk_asig" );
		EXPRESSION1( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void LOOP_FOR2( ) {
	if( token == "falso" || token == "id" || token == "tk_cadena" || token == "tk_caracter" || token == "tk_entero" || token == "tk_mas" || token == "tk_menos" || token == "tk_neg" || token == "tk_par_izq" || token == "tk_real" || token == "verdadero" ) {
		EXPRESSION1( );
		return ;
	}
	if( token == "tk_par_der" || token == "tk_pyc" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void LOOP_FOR3( ) {
	if( token == "falso" || token == "id" || token == "tk_cadena" || token == "tk_caracter" || token == "tk_entero" || token == "tk_mas" || token == "tk_menos" || token == "tk_neg" || token == "tk_par_der" || token == "tk_par_izq" || token == "tk_real" || token == "verdadero" ) {
		LOOP_FOR2( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void LOOP_WHILE( ) {
	if( token == "mientras" ) {
		match( "mientras" );
		match( "tk_par_izq" );
		EXPRESSION1( );
		match( "tk_par_der" );
		match( "hacer" );
		BLOCK_INSTRUCTIONS( );
		match( "fin_mientras" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void MAIN_FUNCTION( ) {
	if( token == "estructura" || token == "funcion" || token == "funcion_principal" ) {
		FUNCTIONS_ADT( );
		match( "funcion_principal" );
		BLOCK_INSTRUCTIONS( );
		match( "fin_principal" );
		FUNCTIONS_ADT( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void MORE( ) {
	if( token == "tk_coma" ) {
		match( "tk_coma" );
		EXPRESSION1( );
		MORE( );
		return ;
	}
	if( token == "tk_par_der" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void PARAMETERS( ) {
	if( token == "cadena" || token == "caracter" || token == "entero" || token == "id" || token == "real" ) {
		DATATYPE( );
		match( "id" );
		END_PARAMETER( );
		return ;
	}
	if( token == "id" ) {
		match( "id" );
		PARAMETERS_( );
		return ;
	}
	if( token == "tk_par_der" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void PARAMETERS_( ) {
	if( token == "tk_coma" ) {
		match( "tk_coma" );
		match( "id" );
		PARAMETERS_( );
		return ;
	}
	if( token == "tk_par_der" ) {
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void PRINT( ) {
	if( token == "imprimir" ) {
		match( "imprimir" );
		match( "tk_par_izq" );
		EXPRESSION1( );
		MORE( );
		match( "tk_par_der" );
		match( "tk_pyc" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void READ( ) {
	if( token == "leer" ) {
		match( "leer" );
		match( "tk_par_izq" );
		ID( );
		match( "tk_par_der" );
		match( "tk_pyc" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void SWITCH_CASE( ) {
	if( token == "seleccionar" ) {
		match( "seleccionar" );
		match( "tk_par_izq" );
		ID( );
		match( "tk_par_der" );
		match( "entre" );
		SWITCH_CASE_( );
		match( "defecto" );
		match( "tk_dosp" );
		match( "fin_seleccionar" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void SWITCH_CASE_( ) {
	if( token == "caso" ) {
		match( "caso" );
		EXPRESSION1( );
		match( "tk_dosp" );
		BLOCK_INSTRUCTIONS( );
		SWITCH_CASE_( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void TERM( ) {
	if( token == "tk_par_izq" ) {
		match( "tk_par_izq" );
		EXPRESSION1( );
		match( "tk_par_der" );
		return ;
	}
	if( token == "tk_cadena" || token == "tk_caracter" || token == "tk_entero" || token == "tk_real" ) {
		CONSTANT( );
		return ;
	}
	if( token == "id" ) {
		ID( );
		return ;
	}
	if( token == "verdadero" ) {
		match( "verdadero" );
		return ;
	}
	if( token == "falso" ) {
		match( "falso" );
		return ;
	}
	if( token == "tk_menos" ) {
		match( "tk_menos" );
		TERM( );
		return ;
	}
	if( token == "tk_mas" ) {
		match( "tk_mas" );
		TERM( );
		return ;
	}
	if( token == "tk_neg" ) {
		match( "tk_neg" );
		TERM( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void VALUE_ASSIGNMENT( ) {
	if( token == "id" ) {
		ID( );
		match( "tk_asig" );
		EXPRESSION1( );
		match( "tk_pyc" );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void VAR( ) {
	if( token == "id" ) {
		match( "id" );
		ASSIGN_VALUE( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
void VARIABLE_DECLARATION( ) {
	if( token == "cadena" || token == "caracter" || token == "entero" || token == "id" || token == "real" ) {
		DATATYPE( );
		VAR( );
		END_VAR_DECLARATION( );
		return ;
	}
	cout << "Error\n";
	exit( 0 );
}
