grammar.PB( "PROGRAMA -> DECLARACIONES_GLOBALES FUNCION_PRINCIPAL DECLARACIONES_GLOBALES" );
grammar.PB( "DECLARACIONES_GLOBALES -> DECLARACION_VARIABLES_GLOBALES DECLARACIONES_GLOBALES" );
grammar.PB( "DECLARACIONES_GLOBALES -> DECLARACION_FUNCION DECLARACIONES_GLOBALES" );
grammar.PB( "DECLARACIONES_GLOBALES -> DECLARACION_ESTRUCTURA DECLARACIONES_GLOBALES" );
grammar.PB( "DECLARACIONES_GLOBALES -> epsilon" );
grammar.PB( "FUNCION_PRINCIPAL -> funcion_principal BLOQUE_INSTRUCCIONES fin_principal" );
grammar.PB( "DECLARACION_FUNCION -> funcion TIPO_DATO id tk_par_izq PARAMETROS_FUNCION tk_par_der hacer BLOQUE_INSTRUCCIONES_FUNCION fin_funcion" );
grammar.PB( "PARAMETROS_FUNCION -> TIPO_DATO id MAS_PARAMETROS_FUNCION" );
grammar.PB( "PARAMETROS_FUNCION -> epsilon" );
grammar.PB( "MAS_PARAMETROS_FUNCION -> tk_coma TIPO_DATO id MAS_PARAMETROS_FUNCION" );
grammar.PB( "MAS_PARAMETROS_FUNCION -> epsilon" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> LEER BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> IMPRIMIR BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> DECLARACION_O_ASIGNACION_O_LLAMADO BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> CONDICIONAL_SI_FUNCION BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> SELECCIONAR_FUNCION BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> CICLO_MIENTRAS_FUNCION BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> CICLO_HACER_MIENTRAS_FUNCION BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> CICLO_PARA_FUNCION BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> RETORNAR BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> ROMPER BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_FUNCION -> epsilon" );
grammar.PB( "DECLARACION_ESTRUCTURA -> estructura id DATOS_ESTRUCTURA fin_estructura" );
grammar.PB( "DATOS_ESTRUCTURA -> TIPO_DATO DECLARACION_VARIABLE tk_pyc COMPLEMENTO_DATOS_ESTRUCTURA" );
grammar.PB( "COMPLEMENTO_DATOS_ESTRUCTURA -> TIPO_DATO DECLARACION_VARIABLE tk_pyc COMPLEMENTO_DATOS_ESTRUCTURA" );
grammar.PB( "COMPLEMENTO_DATOS_ESTRUCTURA -> epsilon" );
grammar.PB( "DECLARACION_VARIABLES_GLOBALES -> TIPO_DATO DECLARACION_VARIABLE tk_pyc" );
grammar.PB( "CONDICIONAL_SI_FUNCION -> si tk_par_izq EXPRESION tk_par_der entonces BLOQUE_INSTRUCCIONES_FUNCION COMPLEMENTO_CONDICIONAL_SI_FUNCION" );
grammar.PB( "COMPLEMENTO_CONDICIONAL_SI_FUNCION -> si_no BLOQUE_INSTRUCCIONES_FUNCION fin_si" );
grammar.PB( "COMPLEMENTO_CONDICIONAL_SI_FUNCION -> fin_si" );
grammar.PB( "SELECCIONAR_FUNCION -> seleccionar tk_par_izq EXPRESION tk_par_der entre BLOQUE_SELECCIONAR_FUNCION fin_seleccionar" );
grammar.PB( "BLOQUE_SELECCIONAR_FUNCION -> caso EXPRESION tk_dosp BLOQUE_INSTRUCCIONES_FUNCION COMPLEMENTO_BLOQUE_SELECCIONAR_FUNCION" );
grammar.PB( "BLOQUE_SELECCIONAR_FUNCION -> defecto tk_dosp BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_SELECCIONAR_FUNCION -> caso EXPRESION tk_dosp BLOQUE_INSTRUCCIONES_FUNCION COMPLEMENTO_BLOQUE_SELECCIONAR_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_SELECCIONAR_FUNCION -> defecto tk_dosp BLOQUE_INSTRUCCIONES_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_SELECCIONAR_FUNCION -> epsilon" );
grammar.PB( "CICLO_MIENTRAS_FUNCION -> mientras tk_par_izq EXPRESION tk_par_der hacer BLOQUE_INSTRUCCIONES_FUNCION fin_mientras" );
grammar.PB( "CICLO_HACER_MIENTRAS_FUNCION -> hacer BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION" );
grammar.PB( "BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> mientras tk_par_izq EXPRESION tk_par_der AUXILIAR_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION" );
grammar.PB( "AUXILIAR_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> hacer BLOQUE_INSTRUCCIONES_FUNCION fin_mientras BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION" );
grammar.PB( "AUXILIAR_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> tk_pyc" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> LEER" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> IMPRIMIR" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> DECLARACION_O_ASIGNACION_O_LLAMADO" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> CONDICIONAL_SI_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> SELECCIONAR_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> CICLO_HACER_MIENTRAS_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> CICLO_PARA_FUNCION" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> RETORNAR" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS_FUNCION -> ROMPER" );
grammar.PB( "CICLO_PARA_FUNCION  -> para tk_par_izq CICLO_PARA_FUNCION_1 tk_pyc EXPRESION tk_pyc EXPRESION tk_par_der hacer BLOQUE_INSTRUCCIONES_FUNCION fin_para" );
grammar.PB( "CICLO_PARA_FUNCION_1 -> TIPO_DATO_PRIMITIVO id tk_asig EXPRESION" );
grammar.PB( "CICLO_PARA_FUNCION_1 -> id COMPLEMENTO_CICLO_PARA_FUNCION_1" );
grammar.PB( "COMPLEMENTO_CICLO_PARA_FUNCION_1 -> id tk_asig EXPRESION" );
grammar.PB( "COMPLEMENTO_CICLO_PARA_FUNCION_1 -> tk_asig EXPRESION" );
grammar.PB( "ROMPER -> romper tk_pyc" );
grammar.PB( "RETORNAR -> retornar EXPRESION tk_pyc" );
grammar.PB( "DECLARACION_O_ASIGNACION_O_LLAMADO -> TIPO_DATO_PRIMITIVO DECLARACION_VARIABLE tk_pyc" );
grammar.PB( "DECLARACION_O_ASIGNACION_O_LLAMADO -> id COMPLEMENTO_DECLARACION_O_ASIGNACION_O_LLAMADO tk_pyc" );
grammar.PB( "COMPLEMENTO_DECLARACION_O_ASIGNACION_O_LLAMADO -> IDENTIFICADOR_DATO_ESTRUCTURA ASIGNACION_VARIABLE" );
grammar.PB( "COMPLEMENTO_DECLARACION_O_ASIGNACION_O_LLAMADO -> ASIGNACION_VARIABLE" );
grammar.PB( "COMPLEMENTO_DECLARACION_O_ASIGNACION_O_LLAMADO -> LLAMADO_FUNCION" );
grammar.PB( "COMPLEMENTO_DECLARACION_O_ASIGNACION_O_LLAMADO -> DECLARACION_VARIABLE" );
grammar.PB( "IMPRIMIR -> imprimir tk_par_izq PARAMETROS_IMPRIMIR tk_par_der tk_pyc" );
grammar.PB( "PARAMETROS_IMPRIMIR -> EXPRESION MAS_PARAMETROS_IMPRIMIR" );
grammar.PB( "MAS_PARAMETROS_IMPRIMIR -> tk_coma EXPRESION MAS_PARAMETROS_IMPRIMIR" );
grammar.PB( "MAS_PARAMETROS_IMPRIMIR -> epsilon" );
grammar.PB( "LEER -> leer tk_par_izq IDENTIFICADOR tk_par_der tk_pyc" );
grammar.PB( "DECLARACION_VARIABLE -> VARIABLE MAS_DECLARACION_VARIABLE" );
grammar.PB( "MAS_DECLARACION_VARIABLE -> tk_coma VARIABLE MAS_DECLARACION_VARIABLE" );
grammar.PB( "MAS_DECLARACION_VARIABLE -> epsilon" );
grammar.PB( "VARIABLE -> id ASIGNACION_VARIABLE" );
grammar.PB( "ASIGNACION_VARIABLE -> tk_asig EXPRESION" );
grammar.PB( "ASIGNACION_VARIABLE -> epsilon" );
grammar.PB( "LLAMADO_FUNCION -> tk_par_izq PARAMETROS_LLAMADO_FUNCION tk_par_der" );
grammar.PB( "PARAMETROS_LLAMADO_FUNCION -> EXPRESION MAS_PARAMETROS_LLAMADO_FUNCION" );
grammar.PB( "PARAMETROS_LLAMADO_FUNCION -> epsilon" );
grammar.PB( "MAS_PARAMETROS_LLAMADO_FUNCION -> tk_coma EXPRESION MAS_PARAMETROS_LLAMADO_FUNCION" );
grammar.PB( "MAS_PARAMETROS_LLAMADO_FUNCION -> epsilon" );
grammar.PB( "IDENTIFICADOR -> id COMPLEMENTO_IDENTIFICADOR" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR -> tk_punto id COMPLEMENTO_IDENTIFICADOR" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR -> epsilon" );
grammar.PB( "IDENTIFICADOR_DATO_ESTRUCTURA -> tk_punto id COMPLEMENTO_IDENTIFICADOR_DATO_ESTRUCTURA" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR_DATO_ESTRUCTURA -> tk_punto id COMPLEMENTO_IDENTIFICADOR_DATO_ESTRUCTURA" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR_DATO_ESTRUCTURA -> epsilon" );
grammar.PB( "TIPO_DATO  -> TIPO_DATO_PRIMITIVO" );
grammar.PB( "TIPO_DATO  -> id" );
grammar.PB( "TIPO_DATO_PRIMITIVO -> entero" );
grammar.PB( "TIPO_DATO_PRIMITIVO -> real" );
grammar.PB( "TIPO_DATO_PRIMITIVO -> caracter" );
grammar.PB( "TIPO_DATO_PRIMITIVO -> cadena" );
grammar.PB( "TIPO_DATO_PRIMITIVO -> booleano" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> LEER BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> IMPRIMIR BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> DECLARACION_O_ASIGNACION_O_LLAMADO BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> CONDICIONAL_SI BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> SELECCIONAR BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> CICLO_MIENTRAS BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> CICLO_HACER_MIENTRAS BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> CICLO_PARA BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> ROMPER BLOQUE_INSTRUCCIONES" );
grammar.PB( "BLOQUE_INSTRUCCIONES -> epsilon" );
grammar.PB( "CONDICIONAL_SI -> si tk_par_izq EXPRESION tk_par_der entonces BLOQUE_INSTRUCCIONES COMPLEMENTO_CONDICIONAL_SI" );
grammar.PB( "COMPLEMENTO_CONDICIONAL_SI -> si_no BLOQUE_INSTRUCCIONES fin_si" );
grammar.PB( "COMPLEMENTO_CONDICIONAL_SI -> fin_si" );
grammar.PB( "SELECCIONAR -> seleccionar tk_par_izq EXPRESION tk_par_der entre BLOQUE_SELECCIONAR fin_seleccionar" );
grammar.PB( "BLOQUE_SELECCIONAR -> caso EXPRESION tk_dosp BLOQUE_INSTRUCCIONES COMPLEMENTO_BLOQUE_SELECCIONAR" );
grammar.PB( "BLOQUE_SELECCIONAR -> defecto tk_dosp BLOQUE_INSTRUCCIONES" );
grammar.PB( "COMPLEMENTO_BLOQUE_SELECCIONAR -> caso EXPRESION tk_dosp BLOQUE_INSTRUCCIONES COMPLEMENTO_BLOQUE_SELECCIONAR" );
grammar.PB( "COMPLEMENTO_BLOQUE_SELECCIONAR -> defecto tk_dosp BLOQUE_INSTRUCCIONES" );
grammar.PB( "COMPLEMENTO_BLOQUE_SELECCIONAR -> epsilon" );
grammar.PB( "CICLO_MIENTRAS -> mientras tk_par_izq EXPRESION tk_par_der hacer BLOQUE_INSTRUCCIONES fin_mientras" );
grammar.PB( "CICLO_HACER_MIENTRAS -> hacer BLOQUE_INSTRUCCIONES_HACER_MIENTRAS" );
grammar.PB( "BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS BLOQUE_INSTRUCCIONES_HACER_MIENTRAS" );
grammar.PB( "BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> mientras tk_par_izq EXPRESION tk_par_der AUXILIAR_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS" );
grammar.PB( "AUXILIAR_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> hacer BLOQUE_INSTRUCCIONES fin_mientras BLOQUE_INSTRUCCIONES_HACER_MIENTRAS" );
grammar.PB( "AUXILIAR_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> tk_pyc" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> LEER" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> IMPRIMIR" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> DECLARACION_O_ASIGNACION_O_LLAMADO" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> CONDICIONAL_SI" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> SELECCIONAR" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> CICLO_HACER_MIENTRAS" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> CICLO_PARA" );
grammar.PB( "COMPLEMENTO_BLOQUE_INSTRUCCIONES_HACER_MIENTRAS -> ROMPER" );
grammar.PB( "CICLO_PARA  -> para tk_par_izq CICLO_PARA_1 tk_pyc EXPRESION tk_pyc EXPRESION tk_par_der hacer BLOQUE_INSTRUCCIONES fin_para" );
grammar.PB( "CICLO_PARA_1 -> TIPO_DATO_PRIMITIVO id tk_asig EXPRESION" );
grammar.PB( "CICLO_PARA_1 -> id COMPLEMENTO_CICLO_PARA_1" );
grammar.PB( "COMPLEMENTO_CICLO_PARA_1 -> id tk_asig EXPRESION" );
grammar.PB( "COMPLEMENTO_CICLO_PARA_1 -> tk_asig EXPRESION" );
grammar.PB( "EXPRESION  -> TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION -> tk_y TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION -> tk_o TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION -> EXPRESION_1" );
grammar.PB( "EXPRESION_1 -> tk_igual TERMINO COMPLEMENTO_EXPRESION_1_2" );
grammar.PB( "EXPRESION_1 -> tk_dif TERMINO COMPLEMENTO_EXPRESION_1_2" );
grammar.PB( "EXPRESION_1 -> EXPRESION_2" );
grammar.PB( "EXPRESION_2 -> tk_menor TERMINO COMPLEMENTO_EXPRESION_1_2" );
grammar.PB( "EXPRESION_2 -> tk_mayor TERMINO COMPLEMENTO_EXPRESION_1_2" );
grammar.PB( "EXPRESION_2 -> tk_menor_igual TERMINO COMPLEMENTO_EXPRESION_1_2" );
grammar.PB( "EXPRESION_2 -> tk_mayor_igual TERMINO COMPLEMENTO_EXPRESION_1_2" );
grammar.PB( "EXPRESION_2 -> EXPRESION_3" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_y TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_o TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_mas TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_menos TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_mult TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_mod TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> tk_div TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "COMPLEMENTO_EXPRESION_1_2 -> epsilon" );
grammar.PB( "EXPRESION_3 -> tk_mas TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "EXPRESION_3 -> tk_menos TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "EXPRESION_3 -> EXPRESION_4" );
grammar.PB( "EXPRESION_4 -> tk_mult TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "EXPRESION_4 -> tk_mod TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "EXPRESION_4 -> tk_div TERMINO COMPLEMENTO_EXPRESION" );
grammar.PB( "EXPRESION_4 -> epsilon" );
grammar.PB( "TERMINO -> tk_par_izq EXPRESION tk_par_der" );
grammar.PB( "TERMINO -> CONSTANTE" );
grammar.PB( "TERMINO -> IDENTIFICADOR_O_LLAMADO" );
grammar.PB( "TERMINO -> verdadero" );
grammar.PB( "TERMINO -> falso" );
grammar.PB( "TERMINO -> tk_menos TERMINO" );
grammar.PB( "TERMINO -> tk_mas TERMINO" );
grammar.PB( "TERMINO -> tk_neg TERMINO" );
grammar.PB( "IDENTIFICADOR_O_LLAMADO -> id COMPLEMENTO_IDENTIFICADOR_O_LLAMADO" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR_O_LLAMADO -> LLAMADO_FUNCION" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR_O_LLAMADO -> IDENTIFICADOR_DATO_ESTRUCTURA" );
grammar.PB( "COMPLEMENTO_IDENTIFICADOR_O_LLAMADO -> epsilon" );
grammar.PB( "CONSTANTE -> tk_entero" );
grammar.PB( "CONSTANTE -> tk_real" );
grammar.PB( "CONSTANTE -> tk_caracter" );
grammar.PB( "CONSTANTE -> tk_cadena" );
